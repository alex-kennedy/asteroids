{"version":3,"sources":["assets/shaders/stars.js","components/Scene.js","components/Orbit.js","assets/stars/star.svg","pages/index.js","index.js"],"names":["vertexShader","fragmentShader","fetchBrotliAsJSON","path","a","fetch","response","arrayBuffer","buffer","decompressed","decompress","Buffer","JSON","parse","TextDecoder","decode","Scene","props","start","bind","stop","animate","updateDimensions","renderBrightStars","this","createScene","addControls","addStats","loadBrightStars","addPlanets","addSun","window","addEventListener","width","mount","clientWidth","height","clientHeight","aspect","renderer","THREE","camera","scene","add","setSize","setPixelRatio","devicePixelRatio","appendChild","domElement","controls","OrbitControls","position","set","enableDamping","dampingFactor","rotateSpeed","maxDistance","stats","Stats","setMode","geometry","material","color","wireframe","side","sphere","process","then","brightStars","sizes","Float32Array","length","positions","colors","i","toArray","setAttribute","texture","load","starTexture","uniforms","value","starShaders","transparent","stars","sun","planets","systemName","planetElements","hasOwnProperty","planet","Planet","planetColors","initialiseOrbit","push","showInScene","name","pos","currentPosition","x","y","z","mesh","updateProjectionMatrix","removeChild","frameId","requestAnimationFrame","cancelAnimationFrame","begin","scaleVector","scale","subVectors","render","update","end","style","ref","Component","OrbitCurve","focus","e","I","L","long_peri","long_node","type","arg_peri","t","optionalTarget","point","E","conversion","Math","PI","cos","sqrt","pow","sin","co","cO","cI","so","sO","sI","x_ecl","y_ecl","z_ecl","elements","key","time_centuries","getCenturiesTT","M","tol","e_star","E_n","delta","abs","getNowTT","Date","now","curve","solveKepler","getPoint","points","getPoints","setFromPoints","getAttribute","array","line","MESHLINE","setGeometry","useMap","opacity","resolution","innerWidth","innerHeight","sizeAttenuation","lineWidth","near","far","module","exports","Index","id","React","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.36e8c82e.chunk.js","sourcesContent":["const vertexShader = `\n  attribute float size;\n  attribute vec3 color_shader;\n\n  varying vec3 vColor;\n\n  void main() {\n\n    vColor = color_shader;\n\n    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\n    gl_PointSize = size * ( 300.0 / -mvPosition.z );\n\n    gl_Position = projectionMatrix * mvPosition;\n\n  }\n`;\n\nconst fragmentShader = `\n  uniform vec3 color;\n  uniform sampler2D texture;\n\n  varying vec3 vColor;\n\n  void main() {\n\n    vec4 color = vec4( color * vColor, 1.0 ) * texture2D( texture, gl_PointCoord );\n\n    gl_FragColor = color;\n\n  }\n`;\n\nexport {vertexShader, fragmentShader};","import React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport decompress from \"brotli/decompress\";\nimport Stats from \"three/examples/jsm/libs/stats.module\";\n\nimport { Planet } from \"./Orbit.js\";\nimport * as starShaders from \"../assets/shaders/stars\";\n\nimport starTexture from \"./../assets/stars/star.svg\";\nimport planetElements from \"./../assets/planets/planetary_elements.json\";\nimport planetColors from \"./../assets/planets/colours.json\";\n\nconst fetchBrotliAsJSON = async (path) => {\n  const response = await fetch(path);\n  const buffer = await response.arrayBuffer();\n  const decompressed = decompress(Buffer(buffer));\n  return JSON.parse(new TextDecoder(\"utf-8\").decode(decompressed));\n};\n\nclass Scene extends Component {\n  constructor(props) {\n    super(props);\n\n    this.start = this.start.bind(this);\n    this.stop = this.stop.bind(this);\n    this.animate = this.animate.bind(this);\n    this.updateDimensions = this.updateDimensions.bind(this);\n    this.renderBrightStars = this.renderBrightStars.bind(this);\n  }\n\n  componentDidMount() {\n    this.createScene();\n\n    this.addControls();\n    this.addStats();\n    this.loadBrightStars();\n    this.addPlanets();\n    this.addSun();\n\n    // this.addCelestialSphereWireframe();\n\n    window.addEventListener(\"resize\", this.updateDimensions);\n  }\n\n  createScene() {\n    const width = this.mount.clientWidth;\n    const height = this.mount.clientHeight;\n    const aspect = width / height;\n\n    const renderer = new THREE.WebGLRenderer();\n    const camera = new THREE.PerspectiveCamera(45, aspect, 0.001, 100000);\n\n    const scene = new THREE.Scene();\n\n    scene.add(camera);\n    renderer.setSize(width, height);\n    renderer.setPixelRatio(window.devicePixelRatio);\n\n    this.renderer = renderer;\n    this.camera = camera;\n    this.scene = scene;\n\n    this.mount.appendChild(this.renderer.domElement);\n\n    this.start();\n  }\n\n  addControls() {\n    const controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.camera.position.set(0, 0, 20);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.15;\n    controls.rotateSpeed = 0.5;\n    controls.maxDistance = 100;\n    this.controls = controls;\n  }\n\n  addStats() {\n    const stats = new Stats();\n    stats.setMode(0); // 0: fps, 1: ms, 2: mb, 3+: custom\n    this.stats = stats;\n    this.mount.appendChild(this.stats.domElement);\n  }\n\n  addCelestialSphereWireframe() {\n    const radius = 100;\n    const segments = 100;\n    const rings = 100;\n\n    const geometry = new THREE.SphereGeometry(radius, segments, rings);\n    const material = new THREE.MeshBasicMaterial({\n      color: 0xaaaaaa,\n      wireframe: true,\n    });\n    material.side = THREE.DoubleSide;\n\n    const sphere = new THREE.Mesh(geometry, material);\n    this.scene.add(sphere);\n  }\n\n  loadBrightStars() {\n    fetchBrotliAsJSON(\n      process.env.PUBLIC_URL + \"/assets/bright_stars.json.br\"\n    ).then(this.renderBrightStars);\n  }\n\n  renderBrightStars(brightStars) {\n    const sizes = new Float32Array(brightStars.length);\n    const positions = new Float32Array(brightStars.length * 3);\n    const colors = new Float32Array(brightStars.length * 3);\n\n    const color = new THREE.Color(1, 1, 1);\n\n    for (let i = 0; i < brightStars.length; i++) {\n      positions[i * 3] = brightStars[i][1]; // x\n      positions[i * 3 + 1] = brightStars[i][2]; // y\n      positions[i * 3 + 2] = brightStars[i][3]; // z\n\n      sizes[i] = brightStars[i][0] / 2; // manually scaled brightness\n\n      color.toArray(colors, i * 3);\n    }\n\n    const geometry = new THREE.BufferGeometry();\n    geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\n    geometry.setAttribute(\"size\", new THREE.BufferAttribute(sizes, 1));\n    geometry.setAttribute(\"color_shader\", new THREE.BufferAttribute(colors, 3));\n\n    const texture = new THREE.TextureLoader().load(starTexture);\n\n    const material = new THREE.ShaderMaterial({\n      uniforms: {\n        color: { value: new THREE.Color(0xffffff) },\n        texture: { value: texture },\n      },\n      vertexShader: starShaders.vertexShader,\n      fragmentShader: starShaders.fragmentShader,\n      transparent: true,\n    });\n\n    const stars = new THREE.Points(geometry, material);\n    this.scene.add(stars);\n  }\n\n  addSun() {\n    const geometry = new THREE.SphereBufferGeometry(1, 16, 16);\n    const material = new THREE.MeshBasicMaterial({\n      color: new THREE.Color(\"#F9D670\"),\n    });\n    const sphere = new THREE.Mesh(geometry, material);\n    this.scene.add(sphere);\n    this.sun = sphere;\n  }\n\n  addPlanets() {\n    const planets = [];\n\n    // Adds the orbits of the planets\n    for (let systemName in planetElements) {\n      if (planetElements.hasOwnProperty(systemName)) {\n        const planet = new Planet(\n          systemName,\n          planetElements[systemName],\n          planetColors[systemName]\n        );\n        planet.initialiseOrbit();\n        planets.push(planet);\n      }\n    }\n\n    // Adds the sphere/dot representing each planet\n    for (let i = 0; i < planets.length; i++) {\n      planets[i].showInScene(this.scene, this.camera);\n\n      let geometry = new THREE.SphereBufferGeometry(1, 16, 16);\n      let material = new THREE.MeshBasicMaterial({\n        color: planetColors[planets[i].name],\n      });\n\n      let sphere = new THREE.Mesh(geometry, material);\n      let pos = planets[i].currentPosition;\n      sphere.position.set(pos.x, pos.y, pos.z);\n      planets[i].mesh = sphere;\n\n      this.scene.add(sphere);\n    }\n\n    this.planets = planets;\n  }\n\n  updateDimensions() {\n    const width = this.mount.clientWidth;\n    const height = this.mount.clientHeight;\n\n    this.renderer.setSize(width, height);\n    this.camera.aspect = width / height;\n    this.camera.updateProjectionMatrix();\n  }\n\n  componentWillUnmount() {\n    this.stop();\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  start() {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate);\n    }\n  }\n\n  stop() {\n    cancelAnimationFrame(this.frameId);\n  }\n\n  animate() {\n    this.stats.begin();\n\n    // Scale planets, sun\n    const scaleFactor = 250;\n    const scaleVector = new THREE.Vector3();\n    for (let i = 0; i < this.planets.length; i++) {\n      let scale =\n        scaleVector\n          .subVectors(this.planets[i].mesh.position, this.camera.position)\n          .length() / scaleFactor;\n      this.planets[i].mesh.scale.set(scale, scale, scale);\n    }\n    let scale =\n      scaleVector.subVectors(this.sun.position, this.camera.position).length() /\n      scaleFactor;\n    this.sun.scale.set(scale, scale, scale);\n\n    this.renderer.render(this.scene, this.camera);\n    this.controls.update();\n\n    this.stats.end();\n\n    this.frameId = requestAnimationFrame(this.animate);\n  }\n\n  render() {\n    return (\n      <div\n        style={{ width: \"100%\", height: \"100%\" }}\n        ref={(mount) => {\n          this.mount = mount;\n        }}\n      />\n    );\n  }\n}\n\nexport default Scene;\n","import * as THREE from \"three\";\nimport * as MESHLINE from \"three.meshline\";\n\nclass OrbitCurve extends THREE.Curve {\n  constructor(focus, a, e, I, L, long_peri, long_node) {\n    super();\n\n    this.type = \"OrbitCurve\";\n\n    this.focus = focus;\n\n    this.a = a; // semi-major axis\n    this.e = e; // eccentricity\n    this.I = I; // inclination\n    this.L = L; // mean longitude\n    this.long_peri = long_peri; // longitude of perihelion\n    this.long_node = long_node; // longitude of the ascending node\n\n    this.arg_peri = this.long_peri - this.long_node;\n  }\n\n  getPoint(t, optionalTarget) {\n    const point = optionalTarget || new THREE.Vector3();\n\n    const E = t * 360;\n    const conversion = Math.PI / 180;\n\n    const x = this.a * (Math.cos(conversion * E) - this.e);\n    const y =\n      this.a * Math.sqrt(1 - Math.pow(this.e, 2)) * Math.sin(conversion * E);\n\n    const co = Math.cos(conversion * this.arg_peri);\n    const cO = Math.cos(conversion * this.long_node);\n    const cI = Math.cos(conversion * this.I);\n    const so = Math.sin(conversion * this.arg_peri);\n    const sO = Math.sin(conversion * this.long_node);\n    const sI = Math.sin(conversion * this.I);\n\n    const x_ecl = (co * cO - so * sO * cI) * x + (-so * cO - co * sO * cI) * y;\n    const y_ecl = (co * sO + so * cO * cI) * x + (-so * sO + co * cO * cI) * y;\n    const z_ecl = so * sI * x + co * sI * y;\n\n    return point.set(x_ecl, y_ecl, z_ecl);\n  }\n}\n\nclass OrbitingObject {\n  constructor(name, focus, a, e, I, L, long_peri, long_node) {\n    this.name = name || \"\";\n    this.focus = focus || new THREE.Vector3(0, 0, 0);\n\n    this.a = a; // semi-major axis\n    this.e = e; // eccentricity\n    this.I = I; // inclination\n    this.L = L; // mean longitude\n    this.long_peri = long_peri; // longitude of perihelion\n    this.long_node = long_node; // longitude of the ascending node\n  }\n}\n\nclass Planet extends OrbitingObject {\n  constructor(name, elements, color) {\n    super(name);\n\n    this.color = color;\n    this.time_centuries = this.getCenturiesTT();\n\n    for (let key in elements) {\n      if (elements.hasOwnProperty(key)) {\n        // Part 1: compute planet's six elements\n        this[key] = elements[key][0] + this.time_centuries * elements[key][1];\n      }\n    }\n\n    // Part 2: compute argument of perihelion\n    this.arg_peri = this.long_peri - this.long_node;\n\n    // Part 3: modulus the mean anomaly so -180 <= M <= 180\n    this.M = ((this.L - this.long_peri + 180) % 360) - 180;\n  }\n\n  solveKepler(tol) {\n    // Currently only solves in degrees\n    tol = tol || 1e-6;\n\n    const e_star = (180 / Math.PI) * this.e;\n    let E_n = this.M + e_star * Math.sin((Math.PI / 180) * this.M);\n    let delta = 360;\n    let count = 0;\n\n    while (Math.abs(delta) > tol) {\n      delta =\n        (this.M - (E_n - e_star * Math.sin((Math.PI / 180) * E_n))) /\n        (1 - this.e * Math.cos((Math.PI / 180) * E_n));\n      E_n = E_n + delta;\n      count = count + 1;\n    }\n\n    return E_n;\n  }\n\n  getCenturiesTT() {\n    // Get the number of centuries that have elapsed since J2000.0, TT\n    const nowTT = this.getNowTT();\n    return (nowTT / 86400.0 - 10957.5) / 36525;\n  }\n\n  getNowTT() {\n    // Get the current time as a unix seconds, but in Terrestrial Time\n    return Date.now() / 1000 + 69.184;\n  }\n\n  initialiseOrbit() {\n    this.curve = new OrbitCurve(\n      this.focus,\n      this.a,\n      this.e,\n      this.I,\n      this.L,\n      this.long_peri,\n      this.long_node\n    );\n\n    this.E = this.solveKepler();\n    this.currentPosition = this.curve.getPoint(this.E / 360);\n  }\n\n  showInScene(scene, camera) {\n    const points = this.curve.getPoints(100);\n\n    let geometry = new THREE.BufferGeometry().setFromPoints(points);\n    geometry = geometry.getAttribute(\"position\").array; // Needed due to strange error...\n\n    const line = new MESHLINE.MeshLine();\n    line.setGeometry(geometry);\n\n    const material = new MESHLINE.MeshLineMaterial({\n      useMap: false,\n      color: this.color,\n      opacity: 1,\n      resolution: new THREE.Vector2(window.innerWidth, window.innerHeight),\n      sizeAttenuation: false,\n      lineWidth: 5,\n      near: camera.near,\n      far: camera.far,\n    });\n\n    const mesh = new THREE.Mesh(line.geometry, material);\n    scene.add(mesh);\n  }\n}\n\nexport { Planet, OrbitCurve };\n","module.exports = __webpack_public_path__ + \"static/media/star.85baf2a7.svg\";","import React from \"react\";\nimport \"../assets/css/index.css\";\nimport Scene from \"../components/Scene.js\";\n// import Interface from \"../components/Interface.js\";\n\nclass Index extends React.Component {\n  render() {\n    return (\n      <div>\n        <div id=\"container\">\n          <Scene />\n        </div>\n        <div id=\"interface\">\n          {/* Let's remove the interface until it's not horrible */}\n          {/* <Interface /> */}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Index;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/css/index.css\";\nimport Index from \"./pages/index.js\";\n\nReactDOM.render(<Index />, document.getElementById(\"wrapper\"));\n"],"sourceRoot":""}