{"version":3,"sources":["assets/stars/star.svg","utils/index.js","components/Orbit.js","workers/asteroids.worker.js","components/LoaderSnackbar.js","components/Scene.js","assets/shaders/stars.js","assets/shaders/asteroids.js","pages/index.js","index.js"],"names":["module","exports","fetchBrotliAsJSON","path","a","fetch","response","arrayBuffer","buffer","decompressed","decompress","Buffer","JSON","parse","TextDecoder","decode","OrbitCurve","focus","e","I","L","long_peri","long_node","type","arg_peri","t","optionalTarget","point","THREE","E","conversion","Math","PI","x","this","cos","y","sqrt","pow","sin","co","cO","cI","so","sO","sI","x_ecl","y_ecl","z_ecl","set","Planet","name","elements","color","key","time_centuries","getCenturiesTT","hasOwnProperty","M","tol","e_star","E_n","delta","abs","getNowTT","Date","now","curve","solveKepler","currentPosition","getPoint","scene","camera","points","getPoints","geometry","setFromPoints","getAttribute","array","line","MESHLINE","setGeometry","material","useMap","opacity","resolution","window","innerWidth","innerHeight","sizeAttenuation","lineWidth","mesh","add","Worker","__webpack_public_path__","Alert","props","elevation","variant","LoaderSnackbar","Snackbar","open","anchorOrigin","horizontal","vertical","severity","icon","CircularProgress","size","React","Component","Scene","state","loadingAsteroids","start","bind","stop","animate","updateDimensions","renderBrightStars","renderAsteroids","updateAsteroids","handleAsteroidWorkerMessage","createScene","addEventListener","loadBrightStars","addControls","addStats","addPlanets","addSun","asteroidsWorker","AsteroidsWorker","onmessage","postMessage","cmd","width","mount","clientWidth","height","clientHeight","aspect","renderer","setSize","setPixelRatio","devicePixelRatio","appendChild","domElement","controls","OrbitControls","position","enableDamping","dampingFactor","rotateSpeed","maxDistance","enablePan","stats","Stats","setMode","wireframe","side","sphere","process","then","brightStars","sizes","Float32Array","length","positions","colors","i","toArray","setAttribute","texture","load","starTexture","uniforms","value","vertexShader","fragmentShader","transparent","stars","sun","planets","systemName","planetElements","planet","planetColours","initialiseOrbit","push","showInScene","pos","z","message","data","locations","locationsByType","asteroidPoints","Object","entries","numVertices","attributes","count","opacityForAsteroidType","asteroidStyles","alphas","shaderMaterial","colours","depthTest","setState","keys","updateProjectionMatrix","removeChild","frameId","requestAnimationFrame","cancelAnimationFrame","begin","scaleVector","scale","subVectors","render","update","end","style","ref","Index","id","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.d74ccf59.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/star.85baf2a7.svg\";","import decompress from \"brotli/decompress\";\n\nexport async function fetchBrotliAsJSON(path) {\n  const response = await fetch(path);\n  const buffer = await response.arrayBuffer();\n  const decompressed = decompress(Buffer(buffer));\n  return JSON.parse(new TextDecoder(\"utf-8\").decode(decompressed));\n}\n","import * as MESHLINE from \"three.meshline\";\nimport * as THREE from \"three\";\n\nclass OrbitCurve extends THREE.Curve {\n  constructor(focus, a, e, I, L, long_peri, long_node) {\n    super();\n\n    this.type = \"OrbitCurve\";\n\n    this.focus = focus;\n\n    this.a = a; // semi-major axis\n    this.e = e; // eccentricity\n    this.I = I; // inclination\n    this.L = L; // mean longitude\n    this.long_peri = long_peri; // longitude of perihelion\n    this.long_node = long_node; // longitude of the ascending node\n\n    this.arg_peri = this.long_peri - this.long_node;\n  }\n\n  getPoint(t, optionalTarget) {\n    const point = optionalTarget || new THREE.Vector3();\n\n    const E = t * 360;\n    const conversion = Math.PI / 180;\n\n    const x = this.a * (Math.cos(conversion * E) - this.e);\n    const y =\n      this.a * Math.sqrt(1 - Math.pow(this.e, 2)) * Math.sin(conversion * E);\n\n    const co = Math.cos(conversion * this.arg_peri);\n    const cO = Math.cos(conversion * this.long_node);\n    const cI = Math.cos(conversion * this.I);\n    const so = Math.sin(conversion * this.arg_peri);\n    const sO = Math.sin(conversion * this.long_node);\n    const sI = Math.sin(conversion * this.I);\n\n    const x_ecl = (co * cO - so * sO * cI) * x + (-so * cO - co * sO * cI) * y;\n    const y_ecl = (co * sO + so * cO * cI) * x + (-so * sO + co * cO * cI) * y;\n    const z_ecl = so * sI * x + co * sI * y;\n\n    return point.set(x_ecl, y_ecl, z_ecl);\n  }\n}\n\nclass OrbitingObject {\n  constructor(name, focus, a, e, I, L, long_peri, long_node) {\n    this.name = name || \"\";\n    this.focus = focus || new THREE.Vector3(0, 0, 0);\n\n    this.a = a; // semi-major axis\n    this.e = e; // eccentricity\n    this.I = I; // inclination\n    this.L = L; // mean longitude\n    this.long_peri = long_peri; // longitude of perihelion\n    this.long_node = long_node; // longitude of the ascending node\n  }\n}\n\nclass Planet extends OrbitingObject {\n  constructor(name, elements, color) {\n    super(name);\n\n    this.color = color;\n    this.time_centuries = this.getCenturiesTT();\n\n    for (let key in elements) {\n      if (elements.hasOwnProperty(key)) {\n        // Part 1: compute planet's six elements\n        this[key] = elements[key][0] + this.time_centuries * elements[key][1];\n      }\n    }\n\n    // Part 2: compute argument of perihelion\n    this.arg_peri = this.long_peri - this.long_node;\n\n    // Part 3: modulus the mean anomaly so -180 <= M <= 180\n    this.M = ((this.L - this.long_peri + 180) % 360) - 180;\n  }\n\n  solveKepler(tol) {\n    // Currently only solves in degrees\n    tol = tol || 1e-6;\n\n    const e_star = (180 / Math.PI) * this.e;\n    let E_n = this.M + e_star * Math.sin((Math.PI / 180) * this.M);\n    let delta = 360;\n    let count = 0;\n\n    while (Math.abs(delta) > tol) {\n      delta =\n        (this.M - (E_n - e_star * Math.sin((Math.PI / 180) * E_n))) /\n        (1 - this.e * Math.cos((Math.PI / 180) * E_n));\n      E_n = E_n + delta;\n      count = count + 1;\n    }\n\n    return E_n;\n  }\n\n  getCenturiesTT() {\n    // Get the number of centuries that have elapsed since J2000.0, TT\n    const nowTT = this.getNowTT();\n    return (nowTT / 86400.0 - 10957.5) / 36525;\n  }\n\n  getNowTT() {\n    // Get the current time as a unix seconds, but in Terrestrial Time\n    return Date.now() / 1000 + 69.184;\n  }\n\n  initialiseOrbit() {\n    this.curve = new OrbitCurve(\n      this.focus,\n      this.a,\n      this.e,\n      this.I,\n      this.L,\n      this.long_peri,\n      this.long_node\n    );\n\n    this.E = this.solveKepler();\n    this.currentPosition = this.curve.getPoint(this.E / 360);\n  }\n\n  showInScene(scene, camera) {\n    const points = this.curve.getPoints(100);\n\n    let geometry = new THREE.BufferGeometry().setFromPoints(points);\n    geometry = geometry.getAttribute(\"position\").array; // Needed due to strange error...\n\n    const line = new MESHLINE.MeshLine();\n    line.setGeometry(geometry);\n\n    const material = new MESHLINE.MeshLineMaterial({\n      useMap: false,\n      color: this.color,\n      opacity: 1,\n      resolution: new THREE.Vector2(window.innerWidth, window.innerHeight),\n      sizeAttenuation: false,\n      lineWidth: 5,\n    });\n\n    const mesh = new THREE.Mesh(line.geometry, material);\n    scene.add(mesh);\n  }\n}\n\nexport { Planet, OrbitCurve };\n","export default function() {\n  return new Worker(__webpack_public_path__ + \"static/js/asteroids.worker.31be8726.worker.js\");\n}\n","import React from \"react\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nexport default class LoaderSnackbar extends React.Component {\n  render() {\n    return (\n      <div>\n        <Snackbar\n          open={this.props.open}\n          anchorOrigin={{ horizontal: \"left\", vertical: \"bottom\" }}\n        >\n          <Alert\n            severity=\"info\"\n            icon={<CircularProgress color={\"inherit\"} size={20} />}\n          >\n            Loading Asteroids...\n          </Alert>\n        </Snackbar>\n      </div>\n    );\n  }\n}\n","import * as THREE from \"three\";\nimport * as starShaders from \"../assets/shaders/stars\";\nimport * as asteroidShaders from \"../assets/shaders/asteroids\";\n\nimport React, { Component } from \"react\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { Planet } from \"./Orbit.js\";\nimport Stats from \"three/examples/jsm/libs/stats.module\";\nimport asteroidStyles from \"./../assets/asteroids/styles.json\";\nimport planetColours from \"./../assets/planets/colours.json\";\nimport planetElements from \"./../assets/planets/planetary_elements.json\";\nimport starTexture from \"./../assets/stars/star.svg\";\nimport { fetchBrotliAsJSON } from \"./../utils\";\nimport AsteroidsWorker from \"./../workers/asteroids.worker\";\nimport LoaderSnackbar from \"./LoaderSnackbar\";\n\nclass Scene extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { loadingAsteroids: true };\n\n    this.start = this.start.bind(this);\n    this.stop = this.stop.bind(this);\n    this.animate = this.animate.bind(this);\n    this.updateDimensions = this.updateDimensions.bind(this);\n    this.renderBrightStars = this.renderBrightStars.bind(this);\n    this.renderAsteroids = this.renderAsteroids.bind(this);\n    this.updateAsteroids = this.updateAsteroids.bind(this);\n    this.handleAsteroidWorkerMessage = this.handleAsteroidWorkerMessage.bind(\n      this\n    );\n  }\n\n  componentDidMount() {\n    this.createScene();\n\n    window.addEventListener(\"resize\", this.updateDimensions);\n\n    this.loadBrightStars();\n    this.addControls();\n    this.addStats();\n    this.addPlanets();\n    this.addSun();\n\n    this.asteroidsWorker = new AsteroidsWorker();\n    this.asteroidsWorker.onmessage = this.handleAsteroidWorkerMessage;\n    this.asteroidsWorker.postMessage({ cmd: \"init\" });\n\n    window.scene = this;\n  }\n\n  createScene() {\n    const width = this.mount.clientWidth;\n    const height = this.mount.clientHeight;\n    const aspect = width / height;\n\n    const renderer = new THREE.WebGLRenderer();\n    const camera = new THREE.PerspectiveCamera(45, aspect, 0.001, 100000);\n\n    const scene = new THREE.Scene();\n\n    scene.add(camera);\n    renderer.setSize(width, height);\n    renderer.setPixelRatio(window.devicePixelRatio);\n\n    this.renderer = renderer;\n    this.camera = camera;\n    this.scene = scene;\n\n    this.mount.appendChild(this.renderer.domElement);\n\n    this.start();\n  }\n\n  addControls() {\n    const controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.camera.position.set(0, 0, 20);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.15;\n    controls.rotateSpeed = 0.5;\n    controls.maxDistance = 100;\n    controls.enablePan = false;\n    this.controls = controls;\n  }\n\n  addStats() {\n    const stats = new Stats();\n    stats.setMode(0); // 0: fps, 1: ms, 2: mb, 3+: custom\n    this.stats = stats;\n    // this.mount.appendChild(this.stats.domElement); // lazily comment it out for prod\n  }\n\n  addCelestialSphereWireframe() {\n    const radius = 100;\n    const segments = 100;\n    const rings = 100;\n\n    const geometry = new THREE.SphereGeometry(radius, segments, rings);\n    const material = new THREE.MeshBasicMaterial({\n      color: 0xaaaaaa,\n      wireframe: true,\n    });\n    material.side = THREE.DoubleSide;\n\n    const sphere = new THREE.Mesh(geometry, material);\n    this.scene.add(sphere);\n  }\n\n  loadBrightStars() {\n    fetchBrotliAsJSON(\n      process.env.PUBLIC_URL + \"/assets/bright_stars.json.br\"\n    ).then(this.renderBrightStars);\n  }\n\n  renderBrightStars(brightStars) {\n    const sizes = new Float32Array(brightStars.length);\n    const positions = new Float32Array(brightStars.length * 3);\n    const colors = new Float32Array(brightStars.length * 3);\n\n    const color = new THREE.Color(1, 1, 1);\n\n    for (let i = 0; i < brightStars.length; i++) {\n      positions[i * 3] = brightStars[i][1]; // x\n      positions[i * 3 + 1] = brightStars[i][2]; // y\n      positions[i * 3 + 2] = brightStars[i][3]; // z\n\n      sizes[i] = brightStars[i][0] / 2; // manually scaled brightness\n\n      color.toArray(colors, i * 3);\n    }\n\n    const geometry = new THREE.BufferGeometry();\n    geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\n    geometry.setAttribute(\"size\", new THREE.BufferAttribute(sizes, 1));\n    geometry.setAttribute(\"color_shader\", new THREE.BufferAttribute(colors, 3));\n\n    const texture = new THREE.TextureLoader().load(starTexture);\n\n    const material = new THREE.ShaderMaterial({\n      uniforms: {\n        color: { value: new THREE.Color(0xffffff) },\n        texture: { value: texture },\n      },\n      vertexShader: starShaders.vertexShader,\n      fragmentShader: starShaders.fragmentShader,\n      transparent: true,\n    });\n\n    const stars = new THREE.Points(geometry, material);\n    this.scene.add(stars);\n  }\n\n  addSun() {\n    const geometry = new THREE.SphereBufferGeometry(1, 16, 16);\n    const material = new THREE.MeshBasicMaterial({\n      color: new THREE.Color(\"#F9D670\"),\n    });\n    const sphere = new THREE.Mesh(geometry, material);\n    this.scene.add(sphere);\n    this.sun = sphere;\n  }\n\n  addPlanets() {\n    const planets = [];\n\n    // Adds the orbits of the planets\n    for (let systemName in planetElements) {\n      if (planetElements.hasOwnProperty(systemName)) {\n        const planet = new Planet(\n          systemName,\n          planetElements[systemName],\n          planetColours[systemName]\n        );\n        planet.initialiseOrbit();\n        planets.push(planet);\n      }\n    }\n\n    // Adds the sphere/dot representing each planet\n    for (let i = 0; i < planets.length; i++) {\n      planets[i].showInScene(this.scene, this.camera);\n\n      let geometry = new THREE.SphereBufferGeometry(1, 16, 16);\n      let material = new THREE.MeshBasicMaterial({\n        color: planetColours[planets[i].name],\n      });\n\n      let sphere = new THREE.Mesh(geometry, material);\n      let pos = planets[i].currentPosition;\n      sphere.position.set(pos.x, pos.y, pos.z);\n      planets[i].mesh = sphere;\n\n      this.scene.add(sphere);\n    }\n\n    this.planets = planets;\n  }\n\n  handleAsteroidWorkerMessage(message) {\n    if (message.data.cmd === \"initComplete\") {\n      this.renderAsteroids(message.data.locations);\n    } else {\n      this.updateAsteroids(message.data.locations);\n    }\n  }\n\n  renderAsteroids(locationsByType) {\n    this.asteroidPoints = {};\n    for (let [type, locations] of Object.entries(locationsByType)) {\n      let geometry = new THREE.BufferGeometry();\n      geometry.setAttribute(\n        \"position\",\n        new THREE.BufferAttribute(locations, 3)\n      );\n      const numVertices = geometry.attributes.position.count;\n      const opacityForAsteroidType = asteroidStyles.opacity[type];\n      var alphas = new Float32Array(numVertices);\n      for (var i = 0; i < numVertices; i++) {\n        alphas[i] = opacityForAsteroidType;\n      }\n      geometry.setAttribute(\"alpha\", new THREE.BufferAttribute(alphas, 1));\n\n      const shaderMaterial = new THREE.ShaderMaterial({\n        uniforms: {\n          color: { value: new THREE.Color(asteroidStyles.colours[type]) },\n        },\n        vertexShader: asteroidShaders.vertexShader,\n        fragmentShader: asteroidShaders.fragmentShader,\n        transparent: true,\n        depthTest: true,\n      });\n\n      const points = new THREE.Points(geometry, shaderMaterial);\n      this.scene.add(points);\n      this.asteroidPoints[type] = points;\n    }\n\n    this.setState({ loadingAsteroids: false });\n  }\n\n  updateAsteroids(locationsByType) {\n    for (let type of Object.keys(locationsByType)) {\n      this.asteroidPoints[type].geometry.setAttribute(\n        \"position\",\n        new THREE.BufferAttribute(locationsByType[type], 3)\n      );\n    }\n  }\n\n  requestAsteroidUpdate(t) {\n    this.asteroidsWorker.postMessage({ cmd: \"update\", t: t });\n  }\n\n  updateDimensions() {\n    const width = this.mount.clientWidth;\n    const height = this.mount.clientHeight;\n\n    this.renderer.setSize(width, height);\n    this.camera.aspect = width / height;\n    this.camera.updateProjectionMatrix();\n  }\n\n  componentWillUnmount() {\n    this.stop();\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  start() {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate);\n    }\n  }\n\n  stop() {\n    cancelAnimationFrame(this.frameId);\n  }\n\n  animate() {\n    this.stats.begin();\n\n    // Scale planets, sun\n    const scaleFactor = 250;\n    const scaleVector = new THREE.Vector3();\n    for (let i = 0; i < this.planets.length; i++) {\n      let scale =\n        scaleVector\n          .subVectors(this.planets[i].mesh.position, this.camera.position)\n          .length() / scaleFactor;\n      this.planets[i].mesh.scale.set(scale, scale, scale);\n    }\n    let scale =\n      scaleVector.subVectors(this.sun.position, this.camera.position).length() /\n      scaleFactor;\n    this.sun.scale.set(scale, scale, scale);\n\n    this.renderer.render(this.scene, this.camera);\n    this.controls.update();\n\n    this.stats.end();\n\n    this.frameId = requestAnimationFrame(this.animate);\n  }\n\n  render() {\n    return (\n      <>\n        <div\n          style={{ width: \"100%\", height: \"100%\" }}\n          ref={(mount) => {\n            this.mount = mount;\n          }}\n        />\n        <LoaderSnackbar open={this.state.loadingAsteroids} />\n      </>\n    );\n  }\n}\n\nexport default Scene;\n","const vertexShader = `\n  attribute float size;\n  attribute vec3 color_shader;\n\n  varying vec3 vColor;\n\n  void main() {\n\n    vColor = color_shader;\n\n    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\n    gl_PointSize = size * ( 300.0 / -mvPosition.z );\n\n    gl_Position = projectionMatrix * mvPosition;\n\n  }\n`;\n\nconst fragmentShader = `\n  uniform vec3 color;\n  uniform sampler2D texture;\n\n  varying vec3 vColor;\n\n  void main() {\n\n    vec4 color = vec4( color * vColor, 1.0 ) * texture2D( texture, gl_PointCoord );\n\n    gl_FragColor = color;\n\n  }\n`;\n\nexport {vertexShader, fragmentShader};","const vertexShader = `\nattribute float alpha;\nvarying float vAlpha;\n\nvoid main() {\n  vAlpha = alpha;\n  vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n  gl_PointSize = 2.0;\n  gl_Position = projectionMatrix * mvPosition;\n}\n`;\n\nconst fragmentShader = `\nuniform vec3 color;\nvarying float vAlpha;\n\nvoid main() {\n  gl_FragColor = vec4( color, vAlpha );\n}\n`;\n\nexport {vertexShader, fragmentShader};\n","import React from \"react\";\nimport \"../assets/css/index.css\";\nimport Scene from \"../components/Scene.js\";\n// import Interface from \"../components/Interface.js\";\n\nclass Index extends React.Component {\n  render() {\n    return (\n      <div>\n        <div id=\"container\">\n          <Scene />\n        </div>\n        <div id=\"interface\">\n          {/* Let's remove the interface until it's not horrible */}\n          {/* <Interface /> */}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Index;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/css/index.css\";\nimport Index from \"./pages/index.js\";\n\nReactDOM.render(<Index />, document.getElementById(\"wrapper\"));\n"],"sourceRoot":""}