{"version":3,"sources":["assets/stars/bright_stars.csv","assets/stars/star.svg","images/logo.svg","components/Orbit.js","components/Scene.js","components/Interface.js","pages/index.js","index.js"],"names":["module","exports","OrbitCurve","focus","a","e","I","L","long_peri","long_node","type","arg_peri","t","optionalTarget","point","THREE","E","conversion","Math","PI","x","this","cos","y","sqrt","pow","sin","co","cO","cI","so","sO","sI","x_ecl","y_ecl","z_ecl","set","Planet","name","elements","color","key","time_centuries","getCenturiesTT","hasOwnProperty","M","tol","e_star","E_n","delta","abs","getNowTT","Date","now","curve","solveKepler","currentPosition","getPoint","scene","camera","points","getPoints","geometry","setFromPoints","getAttribute","array","line","MESHLINE","setGeometry","material","useMap","opacity","resolution","window","innerWidth","innerHeight","sizeAttenuation","lineWidth","near","far","mesh","add","Scene","props","start","bind","stop","animate","updateDimensions","renderBrightStars","createScene","addControls","addStats","loadBrightStars","addSun","addPlanets","planets","addEventListener","width","mount","clientWidth","height","clientHeight","aspect","renderer","setSize","setPixelRatio","devicePixelRatio","appendChild","domElement","controls","OrbitControls","position","enableDamping","dampingFactor","rotateSpeed","maxDistance","stats","Stats","setMode","wireframe","side","sphere","$","stars_file","data","bright_stars","csv","parse","slice","sizes","Float32Array","length","positions","colors","i","Number","toArray","addAttribute","texture","load","stars_texture","uniforms","value","vertexShader","document","getElementById","textContent","fragmentShader","transparent","stars","vertex","z","vertices","push","size","setRGB","particles","planets_file","system_name","planet","initialiseOrbit","showInScene","updateProjectionMatrix","removeChild","frameId","requestAnimationFrame","cancelAnimationFrame","begin","render","update","end","style","ref","Component","createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","React","Interface","Index","id","ReactDOM"],"mappings":"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","file":"static/js/main.66e1e8ba.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bright_stars.2177dbd4.csv\";","module.exports = __webpack_public_path__ + \"static/media/star.85baf2a7.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.c9583e38.svg\";","import * as THREE from 'three-full';\n// import * as THREE from 'three';\nimport * as MESHLINE from 'three.meshline';\n\n\nclass OrbitCurve extends THREE.Curve {\n    constructor(focus, a, e, I, L, long_peri, long_node) {\n        super();\n\n        this.type = 'OrbitCurve';\n\n        this.focus = focus;\n\n        this.a = a; // semi-major axis \n        this.e = e; // eccentricity\n        this.I = I; // inclination\n        this.L = L; // mean longitude\n        this.long_peri = long_peri; // longitude of perihelion\n        this.long_node = long_node; // longitude of the ascending node\n\n        this.arg_peri = this.long_peri - this.long_node;\n    }\n\n\n    getPoint(t, optionalTarget) {\n        var point = optionalTarget || new THREE.Vector3();\n\n        var E = t * 360;\n        var conversion  = Math.PI / 180;\n\n        var x = this.a * (Math.cos(conversion * E) - this.e);\n        var y = this.a * Math.sqrt(1 - Math.pow(this.e, 2)) * Math.sin(conversion * E);\n\n        var co = Math.cos(conversion * this.arg_peri);\n        var cO = Math.cos(conversion * this.long_node);\n        var cI = Math.cos(conversion * this.I);\n        var so = Math.sin(conversion * this.arg_peri);\n        var sO = Math.sin(conversion * this.long_node);\n        var sI = Math.sin(conversion * this.I);\n\n        var x_ecl = (co*cO - so*sO*cI) * x + (-so*cO - co*sO*cI) * y;\n        var y_ecl = (co*sO + so*cO*cI) * x + (-so*sO + co*cO*cI) * y;\n        var z_ecl = (so*sI) * x + (co*sI) * y;\n        \n        return point.set(x_ecl, y_ecl, z_ecl);\n    }\n}\n\n\nclass OrbitingObject {\n    constructor(name, focus, a, e, I, L, long_peri, long_node) {\n        this.name = name || \"\";\n        this.focus = focus || new THREE.Vector3(0, 0, 0);\n\n        this.a = a; // semi-major axis \n        this.e = e; // eccentricity\n        this.I = I; // inclination\n        this.L = L; // mean longitude\n        this.long_peri = long_peri; // longitude of perihelion\n        this.long_node = long_node; // longitude of the ascending node\n    }\n\n}\n\n\nclass Planet extends OrbitingObject {\n    constructor(name, elements, color) {\n        super(name);\n        \n        this.color = color;\n        this.time_centuries = this.getCenturiesTT();\n\n        for (var key in elements) {\n            if (elements.hasOwnProperty(key)) {\n\n                // Part 1: compute planet's six elements\n                this[key] = elements[key][0] + this.time_centuries * elements[key][1];\n\n            }\n        }\n\n        // Part 2: compute argument of perihelion \n        this.arg_peri = this.long_peri - this.long_node;\n\n        // Part 3: modulus the mean anomaly so -180 <= M <= 180\n        this.M = ((this.L - this.long_peri + 180) % 360) - 180;\n    }\n\n    \n    solveKepler(tol) {\n        // Currently only solves in degrees\n        tol = tol || 1e-6;\n\n        var e_star = (180 / Math.PI) * this.e;\n        var E_n = this.M + e_star * Math.sin((Math.PI / 180) * this.M);\n        var delta = 360;\n        var count = 0;\n\n        while (Math.abs(delta) > tol) {\n            delta = (this.M - (E_n - e_star * Math.sin((Math.PI / 180) * E_n))) / (1 - this.e * Math.cos((Math.PI / 180) * E_n));\n            E_n = E_n + delta;\n            count = count + 1;\n        }\n\n        return E_n;\n    }\n\n\n    getCenturiesTT() {\n\n        // Get the number of centuries that have elapsed since J2000.0, TT\n        var nowTT = this.getNowTT();\n        return ((nowTT / 86400.0) - 10957.5) / 36525;\n\n    }\n\n\n    getNowTT() {\n        // Get the current time as a unix seconds, but in Terrestrial Time\n        return Date.now() / 1000 + 69.184;\n    }\n    \n\n    initialiseOrbit() {\n        this.curve = new OrbitCurve(\n            this.focus,\n            this.a,\n            this.e,\n            this.I,\n            this.L,\n            this.long_peri,\n            this.long_node\n        ); \n\n        this.E = this.solveKepler();\n        this.currentPosition = this.curve.getPoint(this.E / 360);\n    }\n\n\n    showInScene(scene, camera, color) {\n        var points = this.curve.getPoints(100);\n\n        var geometry = new THREE.BufferGeometry().setFromPoints(points);\n        geometry = geometry.getAttribute('position').array; // Needed due to strange error...\n\n        var line = new MESHLINE.MeshLine();\n        line.setGeometry(geometry)\n\n        var material = new MESHLINE.MeshLineMaterial({\n            useMap: false,\n            color: new THREE.Color( 1, 1, 1 ),\n            opacity: 1,\n            resolution: new THREE.Vector2( window.innerWidth, window.innerHeight ),\n            sizeAttenuation: false,\n            lineWidth: 5,\n            near: camera.near,\n            far: camera.far\n        });\n\n        var mesh = new THREE.Mesh(line.geometry, material);\n        scene.add(mesh);\n\n    }\n\n}\n\n\nexport {\n    Planet,\n    OrbitCurve\n}","import React, { Component } from 'react';\nimport * as THREE from 'three-full';\nimport { OrbitControls } from  'three-full'\nimport * as Stats from 'stats-js'\nimport * as $ from 'jquery'\nimport * as csv from 'parse-csv'\n\nimport { Planet } from './Orbit.js'\n\nimport stars_file from './../assets/stars/bright_stars.csv'\nimport stars_texture from './../assets/stars/star.svg'\nimport planets from './../assets/planets/planetary_elements.json'\n\nclass Scene extends Component {\n    constructor(props) {\n        super(props)\n    \n        this.start = this.start.bind(this)\n        this.stop = this.stop.bind(this)\n        this.animate = this.animate.bind(this)\n        this.updateDimensions = this.updateDimensions.bind(this);\n        this.renderBrightStars = this.renderBrightStars.bind(this);\n      }\n\n    componentDidMount() {\n        this.createScene();\n\n        this.addControls();\n        this.addStats();\n        this.loadBrightStars();\n        this.addSun();\n        this.addPlanets(planets);\n\n        // this.addCelestialSphereWireframe();\n\n        window.addEventListener(\"resize\", this.updateDimensions);\n    }\n\n    createScene() {\n        const width = this.mount.clientWidth;\n        const height = this.mount.clientHeight;\n        const aspect = width/height;\n\n        const renderer = new THREE.WebGLRenderer();\n        const camera = new THREE.PerspectiveCamera(\n            45, \n            aspect, \n            0.001, \n            100000\n        );\n\n        const scene = new THREE.Scene();\n    \n        scene.add(camera);\n        renderer.setSize(width, height);\n        renderer.setPixelRatio(window.devicePixelRatio);\n\n        this.renderer = renderer\n        this.camera = camera\n        this.scene = scene\n\n        this.mount.appendChild(this.renderer.domElement)\n\n        this.start()\n    }\n\n    addControls() {\n        const controls = new OrbitControls(this.camera, this.renderer.domElement);\n        this.camera.position.set(0, 0, 20);\n        controls.enableDamping = true;\n        controls.dampingFactor = 0.15;\n        controls.rotateSpeed = 0.15;\n        controls.maxDistance = 100;\n\n        this.controls = controls\n    }\n\n    addStats() {\n        var stats = new Stats();\n        stats.setMode(0); // 0: fps, 1: ms, 2: mb, 3+: custom\n        this.stats = stats\n        this.mount.appendChild(this.renderer.domElement);\n    }\n\n    addCelestialSphereWireframe() {\n        var radius = 100;\n        var segments = 100;\n        var rings = 100;\n    \n        var geometry = new THREE.SphereGeometry(radius, segments, rings);\n        var material = new THREE.MeshBasicMaterial({\n            color: 0xAAAAAA,\n            wireframe: true\n        });\n        material.side = THREE.DoubleSide;\n    \n        var sphere = new THREE.Mesh(geometry, material);\n        this.scene.add(sphere);\n    }\n\n    loadBrightStars() {\n        $.get(stars_file, this.renderBrightStars);\n    } \n\n    renderBrightStars(data) {\n        var parser = new csv.Parser();\n        var bright_stars = parser.parse(data).data;\n\n        // console.log(bright_stars)\n\n        //Remove the column headers\n        bright_stars = bright_stars.slice(1);\n\n        var sizes = new Float32Array(bright_stars.length);\n        var positions = new Float32Array(bright_stars.length * 3);\n        var colors = new Float32Array(bright_stars.length * 3);\n\n        var color = new THREE.Color(1, 1, 1);\n\n        for (var i = 0; i < bright_stars.length; i++) {\n            positions[i * 3] = Number(bright_stars[i][1]);          // x\n            positions[i * 3 + 1] = Number(bright_stars[i][2]);      // y\n            positions[i * 3 + 2] = Number(bright_stars[i][3]);      // z\n\n            sizes[i] = Number(bright_stars[i][0]) / 2.25;\n\n            color.toArray(colors, i * 3);\n        }\n\n        var geometry = new THREE.BufferGeometry();\n        geometry.addAttribute('position', new THREE.BufferAttribute(positions, 3));\n        geometry.addAttribute('size', new THREE.BufferAttribute(sizes, 1));\n        geometry.addAttribute('color_shader', new THREE.BufferAttribute(colors, 3));\n\n        var texture = new THREE.TextureLoader().load(stars_texture);\n\n        var material = new THREE.ShaderMaterial({\n            uniforms: {\n                color: {value: new THREE.Color(0xffffff)},\n                texture: {value: texture}\n            },\n            vertexShader: document.getElementById('vertexshader').textContent,\n            fragmentShader: document.getElementById('fragmentshader').textContent,\n            transparent: true\n        });\n\n        var stars = new THREE.Points(geometry, material);\n        this.scene.add(stars)\n    }\n\n    addSun() {\n        var geometry = new THREE.Geometry();\n    \n        var vertex = new THREE.Vector3();\n        vertex.x = 0;\n        vertex.y = 0;\n        vertex.z = 0;\n    \n        geometry.vertices.push(vertex);\n    \n        var material = new THREE.PointsMaterial( {size: 1} );\n        material.color.setRGB(1, 0.25, 0);\n        var particles = new THREE.Points( geometry, material );\n    \n        this.scene.add(particles);\n    }\n\n    addPlanets(planets_file) {\n        var planets = [];\n\n        for (var system_name in planets_file) {\n\n            if (planets_file.hasOwnProperty(system_name)) {\n                \n                var planet = new Planet(system_name, planets_file[system_name]);\n                planet.initialiseOrbit();\n                planets.push(planet);\n\n            }\n\n        }\n        \n        var geometry = new THREE.Geometry();\n\n        for ( var i = 0; i < planets.length; i ++ ) {\n\n            geometry.vertices.push(planets[i].currentPosition);\n            planets[i].showInScene(this.scene, this.camera); //, colours[i]\n\n        }\n\n        var size = 1;\n        var material = new THREE.PointsMaterial( {size: size} );\n        material.color.setRGB(1, 1, 1);\n        var particles = new THREE.Points( geometry, material );\n\n        this.planets = planets;\n\n        this.scene.add(particles);\n    }\n\n\n    updateDimensions() {\n        const width = this.mount.clientWidth;\n        const height = this.mount.clientHeight;\n\n        this.renderer.setSize(width, height);\n        this.camera.aspect = width / height;\n        this.camera.updateProjectionMatrix();\n    }\n\n    \n    componentWillUnmount() {\n        this.stop()\n        this.mount.removeChild(this.renderer.domElement)\n    }\n\n    start() {\n        if (!this.frameId) {\n            this.frameId = requestAnimationFrame(this.animate)\n        }\n    }\n\n    stop() {\n        cancelAnimationFrame(this.frameId)\n    }\n\n    animate() {\n        this.stats.begin();\n\n        this.renderer.render(this.scene, this.camera);\n        this.controls.update();\n\n        this.stats.end();\n\n        // requestAnimationFrame(animate);\n        this.frameId = window.requestAnimationFrame(this.animate)\n    }\n\n\n    render() {\n        return (\n        <div\n            style={{ width: '100%', height: '100%' }}\n            ref={(mount) => { this.mount = mount }}\n        />\n        )\n    }\n}\n\nexport default Scene","import React from 'react';\nimport Button from '@material-ui/core/Button'\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport { Grid, AppBar, Typography, Switch, Slide } from '@material-ui/core';\nimport Paper from '@material-ui/core/Paper';\nimport Toolbar from '@material-ui/core/Toolbar'\n// import MenuIcon from '@material-ui/icons/Menu'\n\nimport svgLogo from './../images/logo.svg'\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            light: '#8bf5ff',\n            main: '#4fc2f7',\n            dark: '#0092c4',\n            contrastText: '#000'\n        },\n        secondary: {\n            light: '#ffc4ff',\n            main: '#ce93d8',\n            dark: '#9c64a6',\n            contrastText: '#000'\n        }\n    }\n})\n\nclass Settings extends React.Component {\n    state = {\n        checked: false,\n    }\n\n    handleChange = () => {\n        this.setState({ checked: !this.state.checked });\n    }\n\n    render(){\n        const { checked } = this.state;\n        \n        return (\n            <span>\n            <Switch checked={checked} onChange={this.handleChange} aria-label=\"MenuCollapse\" />\n            <Slide direction=\"right\" in={checked}>\n            <Grid item xs={12} sm={8}>\n                <Paper style={{paddingBottom: '20px'}}>\n                    <AppBar position=\"static\" color=\"primary\" style={{marginBottom: '20px'}}>\n                        <Toolbar>\n                            <img src={svgLogo} alt=\"Site Logo\" height=\"50\" style={{paddingRight: '20px'}}/>\n                            <Typography variant=\"display1\" color=\"inherit\">\n                                Solar System\n                            </Typography>\n                        </Toolbar>\n                    </AppBar>\n\n                    <Typography align='center' variant='subheading'>\n                        Hi! This project is in progress\n                        <Button align='center' color='action' href='https://github.com/alex-kennedy/solar-system'>\n                            GitHub\n                        </Button>\n                    </Typography>\n                </Paper>\n            </Grid> \n            </Slide>\n            </span>\n        );\n    }\n}\n\nfunction Interface() {\n    return (\n        <MuiThemeProvider theme={theme}>\n            {/* <Button variant=\"fab\" color=\"primary\" aria-label=\"settings\">\n                <MenuIcon />\n            </Button> */}\n            <Settings />\n        </MuiThemeProvider>\n    );\n}\n\nexport default Interface;","import React from 'react';\n// import ReactDOM from 'react-dom';\nimport '../assets/css/index.css';\nimport Scene from '../components/Scene.js'\nimport Interface from '../components/Interface.js'\n\nclass Index extends React.Component {\n    render () {\n        return(\n            <div>\n                <div id=\"container\">\n                    <Scene />\n                </div>\n                <div id=\"interface\">\n                    {/* Let's remove the interface until it's not horrible */}\n                    {/* <Interface /> */}\n                </div>\n            </div>  \n        );\n    }\n}\n\nexport default Index","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/css/index.css';\nimport Index from './pages/index.js';\n\nReactDOM.render(<Index />, document.getElementById('wrapper'));"],"sourceRoot":""}