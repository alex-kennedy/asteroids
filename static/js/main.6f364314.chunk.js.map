{"version":3,"sources":["assets/shaders/stars.js","components/Scene.js","components/Asteroids.js","components/Orbit.js","assets/stars/star.svg","pages/index.js","index.js"],"names":["vertexShader","fragmentShader","fetchBrotliAsJSON","path","a","fetch","response","arrayBuffer","buffer","decompressed","decompress","Buffer","JSON","parse","TextDecoder","decode","Scene","props","start","bind","stop","animate","updateDimensions","renderBrightStars","renderAsteroids","this","createScene","window","addEventListener","addControls","addStats","loadBrightStars","addPlanets","addSun","loadAsteroids","width","mount","clientWidth","height","clientHeight","aspect","renderer","THREE","camera","scene","add","setSize","setPixelRatio","devicePixelRatio","appendChild","domElement","controls","OrbitControls","position","set","enableDamping","dampingFactor","rotateSpeed","maxDistance","stats","Stats","setMode","geometry","material","color","wireframe","side","sphere","process","then","brightStars","sizes","Float32Array","length","positions","colors","i","toArray","setAttribute","texture","load","starTexture","uniforms","value","starShaders","transparent","stars","sun","planets","systemName","planetElements","hasOwnProperty","planet","Planet","planetColours","initialiseOrbit","push","showInScene","name","pos","currentPosition","x","y","z","mesh","allAsteroids","console","log","Object","entries","type","asteroids","locations","data","calculateAsteroidPosition","asteroidStyles","colours","size","opacity","points","updateProjectionMatrix","removeChild","frameId","requestAnimationFrame","cancelAnimationFrame","begin","scaleVector","scale","subVectors","render","update","end","style","ref","Component","calculateMeanAnomaly","m0","t0","n","m","Date","getTime","Math","PI","solveKeplerEquation","meanAnomaly","e","tol","E_n","delta","abs","sin","cos","calculateEllipticPosition","eccentricAnomaly","r","atanArg","sqrt","tan","theta","atan","rotate3d","argPeri","longAsc","inc","sinArgPeri","cosArgPeri","sinLongAsc","cosLongAsc","sinInc","cosInc","d","OrbitCurve","focus","I","L","long_peri","long_node","arg_peri","t","optionalTarget","point","E","conversion","pow","co","cO","cI","so","sO","sI","x_ecl","y_ecl","z_ecl","elements","key","time_centuries","getCenturiesTT","M","e_star","getNowTT","now","curve","solveKepler","getPoint","getPoints","setFromPoints","getAttribute","array","line","MESHLINE","setGeometry","useMap","resolution","innerWidth","innerHeight","sizeAttenuation","lineWidth","near","far","module","exports","Index","id","React","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.6f364314.chunk.js","sourcesContent":["const vertexShader = `\n  attribute float size;\n  attribute vec3 color_shader;\n\n  varying vec3 vColor;\n\n  void main() {\n\n    vColor = color_shader;\n\n    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\n    gl_PointSize = size * ( 300.0 / -mvPosition.z );\n\n    gl_Position = projectionMatrix * mvPosition;\n\n  }\n`;\n\nconst fragmentShader = `\n  uniform vec3 color;\n  uniform sampler2D texture;\n\n  varying vec3 vColor;\n\n  void main() {\n\n    vec4 color = vec4( color * vColor, 1.0 ) * texture2D( texture, gl_PointCoord );\n\n    gl_FragColor = color;\n\n  }\n`;\n\nexport {vertexShader, fragmentShader};","import React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport decompress from \"brotli/decompress\";\nimport Stats from \"three/examples/jsm/libs/stats.module\";\nimport calculateAsteroidPosition from \"./Asteroids\";\n\nimport { Planet } from \"./Orbit.js\";\nimport * as starShaders from \"../assets/shaders/stars\";\n\nimport starTexture from \"./../assets/stars/star.svg\";\nimport planetElements from \"./../assets/planets/planetary_elements.json\";\nimport planetColours from \"./../assets/planets/colours.json\";\nimport asteroidStyles from './../assets/asteroids/styles.json';\n\nconst fetchBrotliAsJSON = async (path) => {\n  const response = await fetch(path);\n  const buffer = await response.arrayBuffer();\n  const decompressed = decompress(Buffer(buffer));\n  return JSON.parse(new TextDecoder(\"utf-8\").decode(decompressed));\n};\n\nclass Scene extends Component {\n  constructor(props) {\n    super(props);\n\n    this.start = this.start.bind(this);\n    this.stop = this.stop.bind(this);\n    this.animate = this.animate.bind(this);\n    this.updateDimensions = this.updateDimensions.bind(this);\n    this.renderBrightStars = this.renderBrightStars.bind(this);\n    this.renderAsteroids = this.renderAsteroids.bind(this);\n  }\n\n  componentDidMount() {\n    this.createScene();\n\n    window.addEventListener(\"resize\", this.updateDimensions);\n\n    this.addControls();\n    this.addStats();\n    this.loadBrightStars();\n    this.addPlanets();\n    this.addSun();\n    this.loadAsteroids();\n\n    // this.addCelestialSphereWireframe();\n  }\n\n  createScene() {\n    const width = this.mount.clientWidth;\n    const height = this.mount.clientHeight;\n    const aspect = width / height;\n\n    const renderer = new THREE.WebGLRenderer();\n    const camera = new THREE.PerspectiveCamera(45, aspect, 0.001, 100000);\n\n    const scene = new THREE.Scene();\n\n    scene.add(camera);\n    renderer.setSize(width, height);\n    renderer.setPixelRatio(window.devicePixelRatio);\n\n    this.renderer = renderer;\n    this.camera = camera;\n    this.scene = scene;\n\n    this.mount.appendChild(this.renderer.domElement);\n\n    this.start();\n  }\n\n  addControls() {\n    const controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.camera.position.set(0, 0, 20);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.15;\n    controls.rotateSpeed = 0.5;\n    controls.maxDistance = 100;\n    this.controls = controls;\n  }\n\n  addStats() {\n    const stats = new Stats();\n    stats.setMode(0); // 0: fps, 1: ms, 2: mb, 3+: custom\n    this.stats = stats;\n    this.mount.appendChild(this.stats.domElement);\n  }\n\n  addCelestialSphereWireframe() {\n    const radius = 100;\n    const segments = 100;\n    const rings = 100;\n\n    const geometry = new THREE.SphereGeometry(radius, segments, rings);\n    const material = new THREE.MeshBasicMaterial({\n      color: 0xaaaaaa,\n      wireframe: true,\n    });\n    material.side = THREE.DoubleSide;\n\n    const sphere = new THREE.Mesh(geometry, material);\n    this.scene.add(sphere);\n  }\n\n  loadBrightStars() {\n    fetchBrotliAsJSON(\n      process.env.PUBLIC_URL + \"/assets/bright_stars.json.br\"\n    ).then(this.renderBrightStars);\n  }\n\n  renderBrightStars(brightStars) {\n    const sizes = new Float32Array(brightStars.length);\n    const positions = new Float32Array(brightStars.length * 3);\n    const colors = new Float32Array(brightStars.length * 3);\n\n    const color = new THREE.Color(1, 1, 1);\n\n    for (let i = 0; i < brightStars.length; i++) {\n      positions[i * 3] = brightStars[i][1]; // x\n      positions[i * 3 + 1] = brightStars[i][2]; // y\n      positions[i * 3 + 2] = brightStars[i][3]; // z\n\n      sizes[i] = brightStars[i][0] / 2; // manually scaled brightness\n\n      color.toArray(colors, i * 3);\n    }\n\n    const geometry = new THREE.BufferGeometry();\n    geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\n    geometry.setAttribute(\"size\", new THREE.BufferAttribute(sizes, 1));\n    geometry.setAttribute(\"color_shader\", new THREE.BufferAttribute(colors, 3));\n\n    const texture = new THREE.TextureLoader().load(starTexture);\n\n    const material = new THREE.ShaderMaterial({\n      uniforms: {\n        color: { value: new THREE.Color(0xffffff) },\n        texture: { value: texture },\n      },\n      vertexShader: starShaders.vertexShader,\n      fragmentShader: starShaders.fragmentShader,\n      transparent: true,\n    });\n\n    const stars = new THREE.Points(geometry, material);\n    this.scene.add(stars);\n  }\n\n  addSun() {\n    const geometry = new THREE.SphereBufferGeometry(1, 16, 16);\n    const material = new THREE.MeshBasicMaterial({\n      color: new THREE.Color(\"#F9D670\"),\n    });\n    const sphere = new THREE.Mesh(geometry, material);\n    this.scene.add(sphere);\n    this.sun = sphere;\n  }\n\n  addPlanets() {\n    const planets = [];\n\n    // Adds the orbits of the planets\n    for (let systemName in planetElements) {\n      if (planetElements.hasOwnProperty(systemName)) {\n        const planet = new Planet(\n          systemName,\n          planetElements[systemName],\n          planetColours[systemName]\n        );\n        planet.initialiseOrbit();\n        planets.push(planet);\n      }\n    }\n\n    // Adds the sphere/dot representing each planet\n    for (let i = 0; i < planets.length; i++) {\n      planets[i].showInScene(this.scene, this.camera);\n\n      let geometry = new THREE.SphereBufferGeometry(1, 16, 16);\n      let material = new THREE.MeshBasicMaterial({\n        color: planetColours[planets[i].name],\n      });\n\n      let sphere = new THREE.Mesh(geometry, material);\n      let pos = planets[i].currentPosition;\n      sphere.position.set(pos.x, pos.y, pos.z);\n      planets[i].mesh = sphere;\n\n      this.scene.add(sphere);\n    }\n\n    this.planets = planets;\n  }\n\n  loadAsteroids() {\n    fetchBrotliAsJSON(\n      process.env.PUBLIC_URL + \"/assets/asteroids.json.br\"\n    ).then(this.renderAsteroids);\n  }\n\n  renderAsteroids(allAsteroids) {\n    console.log(allAsteroids);\n    for (const [type, asteroids] of Object.entries(allAsteroids)) {\n      let locations = new Float32Array(3 * asteroids.length);\n      for (const [i, data] of asteroids.entries()) {\n        let [x, y, z] = calculateAsteroidPosition(data);\n        locations[3 * i] = x;\n        locations[3 * i + 1] = y;\n        locations[3 * i + 2] = z;\n      }\n\n      let geometry = new THREE.BufferGeometry();\n      geometry.setAttribute(\n        \"position\",\n        new THREE.BufferAttribute(locations, 3)\n      );\n\n      let material = new THREE.PointsMaterial({\n        color: new THREE.Color(asteroidStyles.colours[type]),\n        size: 0.05,\n        transparent: true,\n        opacity: asteroidStyles.opacity[type],\n      });\n      let points = new THREE.Points(geometry, material);\n      this.scene.add(points);\n    }\n  }\n\n  updateDimensions() {\n    const width = this.mount.clientWidth;\n    const height = this.mount.clientHeight;\n\n    this.renderer.setSize(width, height);\n    this.camera.aspect = width / height;\n    this.camera.updateProjectionMatrix();\n  }\n\n  componentWillUnmount() {\n    this.stop();\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  start() {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate);\n    }\n  }\n\n  stop() {\n    cancelAnimationFrame(this.frameId);\n  }\n\n  animate() {\n    this.stats.begin();\n\n    // Scale planets, sun\n    const scaleFactor = 250;\n    const scaleVector = new THREE.Vector3();\n    for (let i = 0; i < this.planets.length; i++) {\n      let scale =\n        scaleVector\n          .subVectors(this.planets[i].mesh.position, this.camera.position)\n          .length() / scaleFactor;\n      this.planets[i].mesh.scale.set(scale, scale, scale);\n    }\n    let scale =\n      scaleVector.subVectors(this.sun.position, this.camera.position).length() /\n      scaleFactor;\n    this.sun.scale.set(scale, scale, scale);\n\n    this.renderer.render(this.scene, this.camera);\n    this.controls.update();\n\n    this.stats.end();\n\n    this.frameId = requestAnimationFrame(this.animate);\n  }\n\n  render() {\n    return (\n      <div\n        style={{ width: \"100%\", height: \"100%\" }}\n        ref={(mount) => {\n          this.mount = mount;\n        }}\n      />\n    );\n  }\n}\n\nexport default Scene;\n","const calculateAsteroidPosition = (d) => {\n  const meanAnomaly = calculateMeanAnomaly(d[0], d[1], d[2])\n  const eccentricAnomaly = solveKeplerEquation(meanAnomaly, d[3], 1e-6);\n  const [x, y] = calculateEllipticPosition(d[7], d[3], eccentricAnomaly);\n  const [xDash, yDash, zDash] = rotate3d(x, y, d[4], d[5], d[6])\n  return [xDash, yDash, zDash];\n};\n\nconst calculateMeanAnomaly = (m0, t0, n) => {\n  let m = m0 + (n * (new Date().getTime() / 1000 - t0)) / 86400;\n  m %= 2 * Math.PI;\n  return m;\n};\n\nconst solveKeplerEquation = (meanAnomaly, e, tol) => {\n  // Initial guess\n  let E_n;\n  if (meanAnomaly > Math.PI) {\n    E_n = meanAnomaly - e / 2;\n  } else {\n    E_n = meanAnomaly + e / 2;\n  }\n\n  let delta = 99;\n  while (Math.abs(delta) > tol) {\n    delta = (E_n - e * Math.sin(E_n) - meanAnomaly) / (1 - e * Math.cos(E_n));\n    E_n -= delta;\n  }\n\n  return E_n;\n};\n\nconst calculateEllipticPosition = (a, e, eccentricAnomaly) => {\n  const r = a * (1 - e * Math.cos(eccentricAnomaly));\n  const atanArg = Math.sqrt((2 + e) / (1 - e)) * Math.tan(eccentricAnomaly / 2);\n  const theta = 2 * Math.atan(atanArg);\n  const x = r * Math.cos(theta);\n  const y = r * Math.sin(theta);\n  return [x, y];\n};\n\nconst rotate3d = (x, y, argPeri, longAsc, inc) => {\n  const sinArgPeri = Math.sin(argPeri);\n  const cosArgPeri = Math.cos(argPeri);\n  const sinLongAsc = Math.sin(longAsc);\n  const cosLongAsc = Math.cos(longAsc);\n  const sinInc = Math.sin(inc);\n  const cosInc = Math.cos(inc);\n\n  const q00 = -sinLongAsc * cosInc * sinArgPeri + cosLongAsc * cosArgPeri;\n  const q01 = -sinLongAsc * cosInc * cosArgPeri - cosLongAsc * sinArgPeri;\n  const q10 = cosLongAsc * cosInc * sinArgPeri + sinLongAsc * cosArgPeri;\n  const q11 = cosLongAsc * cosInc * cosArgPeri - sinLongAsc * sinArgPeri;\n  const q20 = sinInc * sinArgPeri;\n  const q21 = sinInc * cosLongAsc;\n\n  const xDash = q00 * x + q01 * y;\n  const yDash = q10 * x + q11 * y;\n  const zDash = q20 * x + q21 * y;\n  return [xDash, yDash, zDash];\n}\n\nexport default calculateAsteroidPosition;\n","import * as THREE from \"three\";\nimport * as MESHLINE from \"three.meshline\";\n\nclass OrbitCurve extends THREE.Curve {\n  constructor(focus, a, e, I, L, long_peri, long_node) {\n    super();\n\n    this.type = \"OrbitCurve\";\n\n    this.focus = focus;\n\n    this.a = a; // semi-major axis\n    this.e = e; // eccentricity\n    this.I = I; // inclination\n    this.L = L; // mean longitude\n    this.long_peri = long_peri; // longitude of perihelion\n    this.long_node = long_node; // longitude of the ascending node\n\n    this.arg_peri = this.long_peri - this.long_node;\n  }\n\n  getPoint(t, optionalTarget) {\n    const point = optionalTarget || new THREE.Vector3();\n\n    const E = t * 360;\n    const conversion = Math.PI / 180;\n\n    const x = this.a * (Math.cos(conversion * E) - this.e);\n    const y =\n      this.a * Math.sqrt(1 - Math.pow(this.e, 2)) * Math.sin(conversion * E);\n\n    const co = Math.cos(conversion * this.arg_peri);\n    const cO = Math.cos(conversion * this.long_node);\n    const cI = Math.cos(conversion * this.I);\n    const so = Math.sin(conversion * this.arg_peri);\n    const sO = Math.sin(conversion * this.long_node);\n    const sI = Math.sin(conversion * this.I);\n\n    const x_ecl = (co * cO - so * sO * cI) * x + (-so * cO - co * sO * cI) * y;\n    const y_ecl = (co * sO + so * cO * cI) * x + (-so * sO + co * cO * cI) * y;\n    const z_ecl = so * sI * x + co * sI * y;\n\n    return point.set(x_ecl, y_ecl, z_ecl);\n  }\n}\n\nclass OrbitingObject {\n  constructor(name, focus, a, e, I, L, long_peri, long_node) {\n    this.name = name || \"\";\n    this.focus = focus || new THREE.Vector3(0, 0, 0);\n\n    this.a = a; // semi-major axis\n    this.e = e; // eccentricity\n    this.I = I; // inclination\n    this.L = L; // mean longitude\n    this.long_peri = long_peri; // longitude of perihelion\n    this.long_node = long_node; // longitude of the ascending node\n  }\n}\n\nclass Planet extends OrbitingObject {\n  constructor(name, elements, color) {\n    super(name);\n\n    this.color = color;\n    this.time_centuries = this.getCenturiesTT();\n\n    for (let key in elements) {\n      if (elements.hasOwnProperty(key)) {\n        // Part 1: compute planet's six elements\n        this[key] = elements[key][0] + this.time_centuries * elements[key][1];\n      }\n    }\n\n    // Part 2: compute argument of perihelion\n    this.arg_peri = this.long_peri - this.long_node;\n\n    // Part 3: modulus the mean anomaly so -180 <= M <= 180\n    this.M = ((this.L - this.long_peri + 180) % 360) - 180;\n  }\n\n  solveKepler(tol) {\n    // Currently only solves in degrees\n    tol = tol || 1e-6;\n\n    const e_star = (180 / Math.PI) * this.e;\n    let E_n = this.M + e_star * Math.sin((Math.PI / 180) * this.M);\n    let delta = 360;\n    let count = 0;\n\n    while (Math.abs(delta) > tol) {\n      delta =\n        (this.M - (E_n - e_star * Math.sin((Math.PI / 180) * E_n))) /\n        (1 - this.e * Math.cos((Math.PI / 180) * E_n));\n      E_n = E_n + delta;\n      count = count + 1;\n    }\n\n    return E_n;\n  }\n\n  getCenturiesTT() {\n    // Get the number of centuries that have elapsed since J2000.0, TT\n    const nowTT = this.getNowTT();\n    return (nowTT / 86400.0 - 10957.5) / 36525;\n  }\n\n  getNowTT() {\n    // Get the current time as a unix seconds, but in Terrestrial Time\n    return Date.now() / 1000 + 69.184;\n  }\n\n  initialiseOrbit() {\n    this.curve = new OrbitCurve(\n      this.focus,\n      this.a,\n      this.e,\n      this.I,\n      this.L,\n      this.long_peri,\n      this.long_node\n    );\n\n    this.E = this.solveKepler();\n    this.currentPosition = this.curve.getPoint(this.E / 360);\n  }\n\n  showInScene(scene, camera) {\n    const points = this.curve.getPoints(100);\n\n    let geometry = new THREE.BufferGeometry().setFromPoints(points);\n    geometry = geometry.getAttribute(\"position\").array; // Needed due to strange error...\n\n    const line = new MESHLINE.MeshLine();\n    line.setGeometry(geometry);\n\n    const material = new MESHLINE.MeshLineMaterial({\n      useMap: false,\n      color: this.color,\n      opacity: 1,\n      resolution: new THREE.Vector2(window.innerWidth, window.innerHeight),\n      sizeAttenuation: false,\n      lineWidth: 5,\n      near: camera.near,\n      far: camera.far,\n    });\n\n    const mesh = new THREE.Mesh(line.geometry, material);\n    scene.add(mesh);\n  }\n}\n\nexport { Planet, OrbitCurve };\n","module.exports = __webpack_public_path__ + \"static/media/star.85baf2a7.svg\";","import React from \"react\";\nimport \"../assets/css/index.css\";\nimport Scene from \"../components/Scene.js\";\n// import Interface from \"../components/Interface.js\";\n\nclass Index extends React.Component {\n  render() {\n    return (\n      <div>\n        <div id=\"container\">\n          <Scene />\n        </div>\n        <div id=\"interface\">\n          {/* Let's remove the interface until it's not horrible */}\n          {/* <Interface /> */}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Index;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/css/index.css\";\nimport Index from \"./pages/index.js\";\n\nReactDOM.render(<Index />, document.getElementById(\"wrapper\"));\n"],"sourceRoot":""}